# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from middleware.protoBuffers import proposta_pb2 as proposta__pb2


class propostaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fazerProposta = channel.unary_unary(
                '/proposta/fazerProposta',
                request_serializer=proposta__pb2.Proposta.SerializeToString,
                response_deserializer=proposta__pb2.RespostaFazerProposta.FromString,
                )
        self.buscarPropostasRealizadas = channel.unary_unary(
                '/proposta/buscarPropostasRealizadas',
                request_serializer=proposta__pb2.BuscarPropostasRealizadas.SerializeToString,
                response_deserializer=proposta__pb2.RespostaBuscarPropostasRealizadas.FromString,
                )
        self.buscarPropostasRecebidas = channel.unary_unary(
                '/proposta/buscarPropostasRecebidas',
                request_serializer=proposta__pb2.BuscarPropostasRecebidas.SerializeToString,
                response_deserializer=proposta__pb2.RespostaBuscarPropostasRecebidas.FromString,
                )
        self.aceitarProposta = channel.unary_unary(
                '/proposta/aceitarProposta',
                request_serializer=proposta__pb2.AceitarProposta.SerializeToString,
                response_deserializer=proposta__pb2.StatusResposta.FromString,
                )
        self.recusarProposta = channel.unary_unary(
                '/proposta/recusarProposta',
                request_serializer=proposta__pb2.RecusarProposta.SerializeToString,
                response_deserializer=proposta__pb2.StatusResposta.FromString,
                )


class propostaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fazerProposta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buscarPropostasRealizadas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buscarPropostasRecebidas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aceitarProposta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recusarProposta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_propostaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fazerProposta': grpc.unary_unary_rpc_method_handler(
                    servicer.fazerProposta,
                    request_deserializer=proposta__pb2.Proposta.FromString,
                    response_serializer=proposta__pb2.RespostaFazerProposta.SerializeToString,
            ),
            'buscarPropostasRealizadas': grpc.unary_unary_rpc_method_handler(
                    servicer.buscarPropostasRealizadas,
                    request_deserializer=proposta__pb2.BuscarPropostasRealizadas.FromString,
                    response_serializer=proposta__pb2.RespostaBuscarPropostasRealizadas.SerializeToString,
            ),
            'buscarPropostasRecebidas': grpc.unary_unary_rpc_method_handler(
                    servicer.buscarPropostasRecebidas,
                    request_deserializer=proposta__pb2.BuscarPropostasRecebidas.FromString,
                    response_serializer=proposta__pb2.RespostaBuscarPropostasRecebidas.SerializeToString,
            ),
            'aceitarProposta': grpc.unary_unary_rpc_method_handler(
                    servicer.aceitarProposta,
                    request_deserializer=proposta__pb2.AceitarProposta.FromString,
                    response_serializer=proposta__pb2.StatusResposta.SerializeToString,
            ),
            'recusarProposta': grpc.unary_unary_rpc_method_handler(
                    servicer.recusarProposta,
                    request_deserializer=proposta__pb2.RecusarProposta.FromString,
                    response_serializer=proposta__pb2.StatusResposta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proposta', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class proposta(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fazerProposta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proposta/fazerProposta',
            proposta__pb2.Proposta.SerializeToString,
            proposta__pb2.RespostaFazerProposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buscarPropostasRealizadas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proposta/buscarPropostasRealizadas',
            proposta__pb2.BuscarPropostasRealizadas.SerializeToString,
            proposta__pb2.RespostaBuscarPropostasRealizadas.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buscarPropostasRecebidas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proposta/buscarPropostasRecebidas',
            proposta__pb2.BuscarPropostasRecebidas.SerializeToString,
            proposta__pb2.RespostaBuscarPropostasRecebidas.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aceitarProposta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proposta/aceitarProposta',
            proposta__pb2.AceitarProposta.SerializeToString,
            proposta__pb2.StatusResposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recusarProposta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proposta/recusarProposta',
            proposta__pb2.RecusarProposta.SerializeToString,
            proposta__pb2.StatusResposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
